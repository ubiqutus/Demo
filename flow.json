[{"id":"8f3eb58b.e4f428","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"6597665f.d641c8","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"dfa2c91.1858638","type":"ui_tab","z":"","name":"Demo","icon":"dashboard","order":1,"disabled":false,"hidden":false},{"id":"ca4931ee.90b17","type":"ui_group","z":"","name":"Main","tab":"dfa2c91.1858638","order":1,"disp":true,"width":"6","collapse":false},{"id":"d8d5873b.a79278","type":"ui_group","z":"","name":"Environmental","tab":"dfa2c91.1858638","order":2,"disp":true,"width":"6","collapse":false},{"id":"c3d3cbf8.0062e8","type":"udp in","z":"8f3eb58b.e4f428","name":"udp2080","iface":"","port":"2080","ipv":"udp4","multicast":"false","group":"","datatype":"buffer","x":80,"y":180,"wires":[["9c216678.796a98","e87a6178.1aea9"]]},{"id":"9c216678.796a98","type":"debug","z":"8f3eb58b.e4f428","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":230,"y":100,"wires":[]},{"id":"8f5ce7a1.cd6ef8","type":"debug","z":"8f3eb58b.e4f428","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":350,"y":240,"wires":[]},{"id":"3a882654.b0d3fa","type":"debug","z":"8f3eb58b.e4f428","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":450,"y":100,"wires":[]},{"id":"637e11ad.f1976","type":"function","z":"8f3eb58b.e4f428","name":"IotWorx formater","func":"var points;\nvar dataset = {};\nvar valCount;\nvar d = new Date();\n\nvar json_msg = '{\"DeviceType\": \"Base\", \"Device_id\":\"' + msg.deveui + '\",';\njson_msg = json_msg + '\"Message_idx\":\"' + msg.idx + '\",';\njson_msg = json_msg + '\"Customer_id\":\"' + msg.customer + '\",';\njson_msg = json_msg + '\"SIM_id\":\"' + msg.simid + '\",';\njson_msg = json_msg + '\"Data\":';\n\njson_msg =  json_msg + \"[\";\nvalIdx = 0;\nfor (dsIdx = 0; dsIdx < msg.datasetCount; dsIdx++)\n{\n    points = msg.datapointCount[dsIdx];\n    json_msg =  json_msg + '{\"Timestamp\":\"' + d.toISOString() + '\",';\n    for (valCount = 0; valCount < points; valCount++)\n    {\n        dataset = msg.values[valIdx];\n        console.log(dataset);\n        if (dataset !== undefined)\n        {\n            json_msg = json_msg + '\"' + dataset.ID;\n//            if (dataset.DT !== \"CUR\")\n//            {\n//                json_msg = json_msg + '_' + dataset.DT;\n//            }\n            json_msg = json_msg + '\": \"' + dataset.Value.toFixed(2) + '\"';\n        }\n        if (valCount < (points - 1))\n            json_msg = json_msg + ', ';\n        valIdx++;\n    }\n    d.setMinutes(d.getMinutes() - msg.interval);\n    json_msg =  json_msg + '}';\n    if (dsIdx < (msg.datasetCount - 1))\n        json_msg = json_msg + \", \";\n}\njson_msg =  json_msg + ']}';\n\nmsg.payload = json_msg;\n\nreturn msg;","outputs":1,"noerr":0,"x":330,"y":160,"wires":[["3a882654.b0d3fa"]]},{"id":"36433ae0.340046","type":"http request","z":"8f3eb58b.e4f428","name":"IotWorx","method":"POST","ret":"txt","paytoqs":false,"url":"","tls":"","proxy":"","x":540,"y":160,"wires":[["9134b588.823418"]]},{"id":"9134b588.823418","type":"debug","z":"8f3eb58b.e4f428","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":710,"y":160,"wires":[]},{"id":"554aade5.2597a4","type":"e-mail","z":"8f3eb58b.e4f428","server":"smtp.gmail.com","port":"465","secure":true,"tls":true,"name":"maria1.argiraki@gmail.com","dname":"Maria email","x":570,"y":240,"wires":[]},{"id":"5b34fb3f.39cdf4","type":"function","z":"8f3eb58b.e4f428","name":"e-mail formater","func":"var points;\nvar dataset = {};\nvar valCount;\nvar dsIdx;\nvar valIdx = 0;\nvar d = new Date();\nvar time;\n\nvar emsg =    'Source Type: NB-IoT\\r\\n';\nemsg = emsg + 'Device ID:   ' + msg.deveui + '\\r\\n';\nemsg = emsg + 'Flags:       ' + msg.flags + '\\r\\n';\nemsg = emsg + 'SIM ID:      ' + msg.simid + '\\r\\n';\nemsg = emsg + 'Sequence No: ' + msg.idx + '\\r\\n';\nemsg = emsg + 'RSSI:        ' + msg.rssi + '\\r\\n';\nemsg = emsg + 'Data: \\r\\n';\n\nfor (dsIdx = 0; dsIdx < msg.datasetCount; dsIdx++)\n{\n    points = msg.datapointCount[dsIdx];\n    emsg =  emsg + '\\r\\nTimestamp: ' + d.toUTCString() + '\\r\\n';\n\ttime = d.getTime();\n    time = time - (msg.interval); // converts minutes to milliseconds\n    d.setTime(time);\n    for (valCount = 0; valCount < points; valCount++)\n    {\n        dataset = msg.values[valIdx];\n        console.log(dataset);\n        if (dataset !== undefined)\n        {\n            emsg = emsg + dataset.ID;\n//            if (dataset.DT !== \"CUR\")\n//            {\n//                emsg = emsg + \"_\" + dataset.DT;\n//            }\n            emsg = emsg + ': ' + dataset.Value.toFixed(2) + '\\r\\n';\n        }\n        valIdx++;\n    }\n    emsg = emsg + '\\r\\n';\n}\n\nmsg.payload = emsg;\n\nmsg.topic = \"Data from \" + msg.deveui;\n\nreturn msg;","outputs":1,"noerr":0,"x":340,"y":320,"wires":[["f4f0203.5358de","554aade5.2597a4"]]},{"id":"f4f0203.5358de","type":"debug","z":"8f3eb58b.e4f428","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":550,"y":320,"wires":[]},{"id":"e87a6178.1aea9","type":"function","z":"8f3eb58b.e4f428","name":"Parser","func":"var DeviceID = [\"SYS\", \"Ext1\", \"Ext2\",  \"battery\", \"hum\", \"temp\", \"Acceleration\", \n\"Mag\", \"movement\", \"Lux\", \"Gas\", \"Sound\", \"Smoke\", \"Particle\", \"IR TEMP\", \"GPS\"];\nvar DataType = [\"CUR\",  \"SEC\", \"TRD\", \"AVG\", \"MIN\", \"MAX\", \"EVT\"];\nvar ExpArray = [1000, 100, 10, 1, 0.1, 0.01, 0.001, 0.0001];\n\nfunction ParseHeader(strValue)\n{\n\tvar i = 0;\n\tvar res = \"\";\n\n\twhile (i < strValue.length)\n\t{\n\t\tres += String.fromCharCode(parseInt(strValue.substr(i, 2), 16)); \n\t\ti += 2;\n\t}\n\treturn res;\n}\n\nfunction ParseData(strValue)\n{\n    var i = 0;\n    var start, stop, pos, lenmod;\n    var res = [];\n    var str = strValue;\n    \n    start = stop = lenmod = 0;\n    while (start < str.length)\n    {\n        pos = start;\n        lenmod = 0;\n        do {\n            stop = str.indexOf(\"2c\", pos);\n            if (stop < 0)       // catch a string without 2c at the end\n            {\n                lenmod = str.length % 6;\n                break;\n            }\n            pos = stop + 2;\n            lenmod = (stop - start) % 6;\n        } while ((lenmod !== 2) && (pos <= str.length));\n        \n        if (lenmod === 2)\n        {\n            res[i] = str.slice(start, stop);\n            i++;\n        }\n        if (stop < 0)       // catch a string without 2c at the end\n            break; \n        start = stop + 2;\n    }\n    return res;\n}\n\nfunction ParseValue(strValue)\n{\n    var result = {};\n    var val = parseInt(strValue, 16);               // convert the chunk into an unsigned integer\n\n    result.Alarm = (val >> 23) & 0x01;              // this is a flag (0 or 1) to indicate that the value is in alarmed state \n    result.DT = DataType[(val >> 20) & 0x07];       // this defines the value type (current, min, max, average, etc)\n    result.ID = DeviceID[(val >> 16) & 0x0F];       // this is the measurement type (Battery, Temp, RH, Vibration, etc)\n    result.Value = (val & 0xFFF);                   // this is the value mantissa\n\n    if (((val >> 12) & 0x01) > 0)\n        result.Value = -result.Value;\n\n    var exp = ExpArray[(val >> 13) & 0x07];\n    result.Value = result.Value * exp;\n\n    return result;\n}\n\nvar message;\nvar pos;\nvar header;\nvar chunk;\nvar datasetStr = '';\nvar dataset = {};\nvar headerArray = [];\nvar dataArray = [];\nvar setValues = [];\t\t// this holds the values and parameters of each data point\nvar dsIdx, valIdx;\n\n\nmessage = msg.payload.toString(\"hex\");\t\t\t\t// we get the message as the \"payload\" from NodeRed\n//message = msg.payload.toString();\t\t\t\t// we get the message as the \"payload\" from NodeRed\npos = message.indexOf(\"20\");\t\t// the header is up to the value of \"20\" (space character)\n\n// the header requires a pre-processing to be converted to string values\nheader = ParseHeader(message.slice(0, pos));\nmsg.data = message.slice(pos + 2);\t\t// skip the first 00 \n\n// to process the header we slit it into an array. Values are separated by comma \nheaderArray = header.split(',');\nmsg.deveui = headerArray[0];\nmsg.idx = headerArray[1];\n\n// the Flags is a new parameter and will be either 0 or 1 for the time being. \n// A value of 1 indicates that the device will accept responses\nmsg.flags = headerArray[2];\t\t\t\nmsg.simid = headerArray[3];\nmsg.rssi = headerArray[4];\nmsg.interval = headerArray[5];\nmsg.customer = headerArray[6];\nif (msg.interval === undefined)\n    msg.interval = 15;\n\n// to process the data we slit it into an array. Values are separated by comma \n//dataArray = msg.data.split(\"2c\");\ndataArray = ParseData(msg.data);\nmsg.datapointCount = [];\nmsg.values = [];\nmsg.datasetCount = 0;\ndsIdx = 0;\nwhile (dsIdx < dataArray.length)\n{\n    msg.datapointCount[dsIdx] = 0;\n    datasetStr = dataArray[dsIdx];\n    if (datasetStr.length >= 8)\n    {\n        valIdx = 2;\n        while (valIdx < datasetStr.length)\n        {\n            chunk = datasetStr.substr(valIdx, 6);\n            if (chunk.length === 6)\n            {\n                dataset = ParseValue(chunk);\n                msg.values.push(dataset);\n                msg.datapointCount[dsIdx]++;\n            }\n            valIdx += 6;\n        }\n        \n        msg.datasetCount++;\n    }\n    dsIdx++;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":210,"y":240,"wires":[["8f5ce7a1.cd6ef8","637e11ad.f1976","5b34fb3f.39cdf4","bba6ee74.3d9aa"]]},{"id":"678c645d.e3444c","type":"inject","z":"8f3eb58b.e4f428","name":"","topic":"","payload":"3836373732333033303132313534342c303030302c30312c3930313238383030313035313735372c30372c3031352c30303032200003ce150481ce05a9f538e0002c010481c505a9d338e0002c020481e305a9b138e0002c030481f105a99438e0002c","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":90,"y":320,"wires":[["e87a6178.1aea9"]]},{"id":"8e7e164d.6a9108","type":"ui_gauge","z":"8f3eb58b.e4f428","name":"Temperature","group":"d8d5873b.a79278","order":1,"width":0,"height":0,"gtype":"gage","title":"Temperature","label":"C","format":"{{msg.temp}}","min":0,"max":"45","colors":["#d7d700","#008000","#ca3838"],"seg1":"18","seg2":"25","x":530,"y":440,"wires":[]},{"id":"81691b79.356e68","type":"ui_chart","z":"8f3eb58b.e4f428","name":"Movement","group":"ca4931ee.90b17","order":2,"width":0,"height":0,"label":"Movement","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":1,"x":530,"y":560,"wires":[[]]},{"id":"35953d78.b47dd2","type":"ui_gauge","z":"8f3eb58b.e4f428","name":"","group":"d8d5873b.a79278","order":2,"width":0,"height":0,"gtype":"gage","title":"Humidity","label":"%","format":"{{msg.hum}}","min":0,"max":"100","colors":["#e6e600","#00df00","#ca3838"],"seg1":"30","seg2":"60","x":520,"y":480,"wires":[]},{"id":"bba6ee74.3d9aa","type":"function","z":"8f3eb58b.e4f428","name":"UI Formater","func":"var points;\nvar dataset = {};\nvar valCount;\n\npoints = msg.datapointCount[0];\nfor (valCount = 0; valCount < points; valCount++)\n{\n    dataset = msg.values[valCount];\n    if (dataset !== undefined)\n    {\n        if (dataset.ID === 'hum')\n            msg.hum = dataset.Value.toFixed(2);\n        if (dataset.ID === 'battery')\n            msg.battery = dataset.Value.toFixed(2);\n        else if  (dataset.ID === 'temp')\n            msg.temp = dataset.Value.toFixed(2);\n        else if  (dataset.ID === 'movement')\n            msg.payload = dataset.Value.toFixed(2);\n    }\n}\n\nreturn msg;\n\n//var msg1 = { value: msg.temp };\n//var msg2 = { value: msg.hum };\n//var msg3 = { payload: msg.movement };\n\n//return [ msg1, msg2, msg3 ];\n","outputs":1,"noerr":0,"x":310,"y":480,"wires":[["8e7e164d.6a9108","35953d78.b47dd2","4826a908.d082b8","81691b79.356e68"]]},{"id":"4826a908.d082b8","type":"ui_gauge","z":"8f3eb58b.e4f428","name":"Battery","group":"ca4931ee.90b17","order":1,"width":0,"height":0,"gtype":"gage","title":"Battery","label":"V","format":"{{msg.battery}}","min":0,"max":"3.7","colors":["#d50000","#cece00","#00d500"],"seg1":"3","seg2":"3.3","x":520,"y":520,"wires":[]}]